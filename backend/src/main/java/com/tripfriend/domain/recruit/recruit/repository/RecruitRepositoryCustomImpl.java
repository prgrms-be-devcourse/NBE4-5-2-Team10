package com.tripfriend.domain.recruit.recruit.repository;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.querydsl.core.BooleanBuilder;
import com.querydsl.core.types.OrderSpecifier;
import com.querydsl.core.types.dsl.Expressions;
import com.querydsl.core.types.dsl.NumberExpression;
import com.querydsl.jpa.impl.JPAQueryFactory;
import com.tripfriend.domain.recruit.recruit.entity.QRecruit;
import com.tripfriend.domain.recruit.recruit.entity.Recruit;
import com.tripfriend.domain.member.member.entity.AgeRange;
import com.tripfriend.domain.member.member.entity.Gender;

import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Repository;

import java.time.LocalDate;
import java.util.List;
import java.util.Optional;

@Repository
@RequiredArgsConstructor
public class RecruitRepositoryCustomImpl implements RecruitRepositoryCustom {

    private final JPAQueryFactory jpaQueryFactory;
    private final QRecruit recruit = QRecruit.recruit;

    @Override
    public List<Recruit> findByRecruitTest() {
        return jpaQueryFactory.selectFrom(recruit)
                .where(recruit.recruitId.eq(1L))
                .fetch();
    }

    @Override
    public List<Recruit> searchByTitleOrContent(String keyword) {
        return jpaQueryFactory
                .selectFrom(recruit)
                .where(recruit.title.containsIgnoreCase(keyword)
                        .or(recruit.content.containsIgnoreCase(keyword)))
                .fetch();
    }

    @Override
    public List<Recruit> findByIsClosed(boolean isClosed) {
        return jpaQueryFactory
                .selectFrom(recruit)
                .where(recruit.isClosed.eq(isClosed))
                .fetch();
    }

    @Override
    public List<Recruit> searchFilterSort(Optional<String> keyword, Optional<String> placeCityName, Optional<Boolean> isClosed, Optional<LocalDate> startDate, Optional<LocalDate> endDate, Optional<String> travelStyle, Optional<Boolean> sameGender, Optional<Boolean> sameAge, Optional<Integer> minBudget, Optional<Integer> maxBudget, Optional<Integer> minGroupSize, Optional<Integer> maxGroupSize, Optional<String> sortBy, Gender userGender, AgeRange userAgeRange) {
        BooleanBuilder builder = new BooleanBuilder();

        // Ï†úÎ™©, ÎÇ¥Ïö© Í≤ÄÏÉâ
        keyword.ifPresent(k -> builder.and(
                recruit.title.containsIgnoreCase(k)
                        .or(recruit.content.containsIgnoreCase(k))
        ));

        // ÌäπÏ†ï ÎèÑÏãú ÌïÑÌÑ∞ÎßÅ
        placeCityName.ifPresent(city -> builder.and(recruit.place.cityName.eq(city)));

        // Î™®ÏßëÏ§ë ÌïÑÌÑ∞ÎßÅ
        isClosed.ifPresent(c -> builder.and(recruit.isClosed.eq(c)));

        // ÏãúÏûëÏùº, Ï¢ÖÎ£åÏùº ÌïÑÌÑ∞ÎßÅ
        startDate.ifPresent(start -> builder.and(recruit.startDate.goe(start)));
        endDate.ifPresent(end -> builder.and(recruit.endDate.loe(end)));

        // Ïó¨Ìñâ Ïä§ÌÉÄÏùº ÌïÑÌÑ∞ÎßÅ
        travelStyle.ifPresent(style -> builder.and(recruit.travelStyle.stringValue().eq(style)));

        ObjectMapper objectMapper = new ObjectMapper();
        // ‚úÖ ÏÑ±Î≥Ñ ÌïÑÌÑ∞ÎßÅ (sameGenderÍ∞Ä trueÏùº Í≤ΩÏö∞ÏóêÎßå ÌïÑÌÑ∞ÎßÅ Ï†ÅÏö©)
        sameGender.ifPresent(sg -> {
            if (sg) { // sameGenderÍ∞Ä trueÏùº Í≤ΩÏö∞, Í∞ôÏùÄ ÏÑ±Î≥ÑÏù∏ Í≤ΩÏö∞Îßå ÌóàÏö©
                System.out.println("üì¢ sameGender ÌïÑÌÑ∞ Ï†ÅÏö©! ÌòÑÏû¨ Î°úÍ∑∏Ïù∏Ìïú Ïú†Ï†Ä ÏÑ±Î≥Ñ: " + userGender);

                try {
                    System.out.println("üì¢ recruit Í∞ùÏ≤¥ ÌôïÏù∏: " + recruit.toString()); // üöÄ toString() ÏÇ¨Ïö©
                } catch (Exception e) {
                    System.out.println("‚ùå recruit Ï†ïÎ≥¥ Ï∂úÎ†• Ï§ë Ïò§Î•ò Î∞úÏÉù: " + e.getMessage());
                }

                if (recruit.member != null) {
                    System.out.println("üì¢ Î™®ÏßëÍ∏Ä ÏûëÏÑ±ÏûêÏùò ÏÑ±Î≥Ñ: " + recruit.member.gender);
                } else {
                    System.out.println("‚ùå recruit.memberÍ∞Ä NULL ÏûÖÎãàÎã§!");
                }
//                builder.and(
//                        recruit.member.gender.eq(userGender)
//                                .or(recruit.sameGender.isFalse())
//                );

                builder.and(recruit.member.isNotNull()); // üî• Lazy Loading Î¨∏Ï†ú Î∞©ÏßÄ

                // üî• memberÍ∞Ä nullÏù¥ ÏïÑÎãå Í≤ΩÏö∞Îßå ÌïÑÌÑ∞ÎßÅ Ï†ÅÏö©!
                builder.and(
                        recruit.member.isNotNull()
                                .and(recruit.member.gender.eq(userGender))
                                .or(recruit.sameGender.isFalse())
                );
            }
        });

        System.out.println("üì¢ ÌòÑÏû¨ Î°úÍ∑∏Ïù∏Ìïú Ïú†Ï†ÄÏùò ÏÑ±Î≥Ñ: " + userGender);
        System.out.println("üì¢ Î™®ÏßëÍ∏Ä ÏûëÏÑ±ÏûêÏùò ÏÑ±Î≥Ñ: " + recruit.member.gender);

        // ‚úÖ ÎÇòÏù¥ÎåÄ ÌïÑÌÑ∞ÎßÅ (sameAgeÍ∞Ä trueÏùº Í≤ΩÏö∞ÏóêÎßå ÌïÑÌÑ∞ÎßÅ Ï†ÅÏö©)
        sameAge.ifPresent(sa -> {
            if (sa) { // sameAgeÍ∞Ä trueÏùº Í≤ΩÏö∞, Í∞ôÏùÄ ÎÇòÏù¥ÎåÄÏù∏ Í≤ΩÏö∞Îßå ÌóàÏö©
                builder.and(
                        recruit.member.ageRange.eq(userAgeRange)
                                .or(recruit.sameAge.isFalse())
                );
            }
        });

        // ÏòàÏÇ∞ ÌïÑÌÑ∞ÎßÅ
        minBudget.ifPresent(min -> builder.and(recruit.budget.goe(min)));
        maxBudget.ifPresent(max -> builder.and(recruit.budget.loe(max)));

        // Ïù∏ÏõêÏàò ÌïÑÌÑ∞ÎßÅ
        minGroupSize.ifPresent(min -> builder.and(recruit.groupSize.goe(min)));
        maxGroupSize.ifPresent(max -> builder.and(recruit.groupSize.loe(max)));

        // Ï†ïÎ†¨ ÏòµÏÖò
        OrderSpecifier<?> orderSpecifier = getOrderSpecifier(sortBy);

        return jpaQueryFactory
                .selectFrom(recruit)
//                .leftJoin(recruit.member).fetchJoin() // üî• Lazy Loading Ìï¥Í≤∞
                .join(recruit.member).fetchJoin() // üî• Lazy Loading ÏôÑÏ†Ñ Ìï¥Í≤∞
                .where(builder)
                .orderBy(orderSpecifier)
                .fetch();
    }

    private OrderSpecifier<?> getOrderSpecifier(Optional<String> sortBy) {
        if (sortBy.isEmpty()) {
            return recruit.createdAt.desc(); // Í∏∞Î≥∏ Ï†ïÎ†¨: ÏµúÏã† ÏÉùÏÑ± Ïàú
        }

        switch (sortBy.get().toLowerCase()) {
            case "startdate_asc":
                return recruit.startDate.asc();
            case "enddate_desc":
                return recruit.endDate.desc();
            case "trip_duration":
                return Expressions.numberTemplate(
                        Integer.class, "TIMESTAMPDIFF(DAY, {0}, {1})", recruit.startDate, recruit.endDate
                ).desc();
            case "budget_asc":
                return recruit.budget.asc();
            case "budget_desc":
                return recruit.budget.desc();
            case "groupsize_asc":
                return recruit.groupSize.asc();
            case "groupsize_desc":
                return recruit.groupSize.desc();
            default:
                return recruit.createdAt.desc(); // Í∏∞Î≥∏ Ï†ïÎ†¨: ÏµúÏã† ÏÉùÏÑ± Ïàú
        }
    }

}

/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/trip/schedule/{scheduleId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["updateSchedule"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/trip/schedule/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** 나의 여행 일정 및 여행 정보 통합 수정 */
        put: operations["updateTrip"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/trip/information/{tripInfoId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put: operations["updateTripInformation"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recruits/{recruitId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getRecruit"];
        put: operations["updateRecruit"];
        post?: never;
        delete: operations["deleteRecruit"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/place/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 여행지 조회 */
        get: operations["getPlace"];
        /** 여행지 정보 수정 */
        put: operations["updatePlace"];
        post?: never;
        /** 여행지 삭제 */
        delete: operations["deletePlace"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/member/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** 회원정보 수정 */
        put: operations["updateMember"];
        post?: never;
        /** 회원 삭제 */
        delete: operations["deleteMember"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/reviews/{reviewId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getReview"];
        put: operations["updateReview"];
        post?: never;
        delete: operations["deleteReview"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/comments/{commentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getComment"];
        put: operations["updateComment"];
        post?: never;
        delete: operations["deleteComment"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/notice/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getNoticeById"];
        put: operations["updateNotice"];
        post?: never;
        delete: operations["deleteNotice"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/trip/schedule": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAllSchedules"];
        put?: never;
        /** 나의 여행 일정 등록 */
        post: operations["createSchedule"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recruits": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getRecruits"];
        put?: never;
        post: operations["createRecruit"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recruits/{recruitId}/applies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getApplies"];
        put?: never;
        post: operations["createApply"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/qna/question": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAllQuestions"];
        put?: never;
        post: operations["createQuestion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/qna/answer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["createAnswer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/place": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 전체 여행지 조회 */
        get: operations["getAllPlaces"];
        put?: never;
        /** 여행지 등록 */
        post: operations["createPlace"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/member/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 액세스 토큰 재발급 */
        post: operations["refresh"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/member/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 로그아웃 */
        post: operations["logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/member/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 로그인 */
        post: operations["login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/member/join": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 회원가입 */
        post: operations["join"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/member/auth/email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 이메일 인증 */
        post: operations["validateAuthCode"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/reviews": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getReviews"];
        put?: never;
        post: operations["createReview"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/comments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["createComment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/notice": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getAllNotices"];
        put?: never;
        post: operations["createNotice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/blacklist": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getBlacklist"];
        put?: never;
        post: operations["addToBlacklist"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/trip/schedule/my-schedules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 나의 여행 일정 전체 조회 */
        get: operations["getMySchedules"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/trip/schedule/member/{memberId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getSchedulesByMember"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recruits/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["searchRecruits"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recruits/search3": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["searchAndFilter"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recruits/search2": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["findRecruitsByIsClosed"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/qna/question/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getQuestionById"];
        put?: never;
        post?: never;
        delete: operations["deleteQuestionById"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/member/mypage": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 마이페이지 */
        get: operations["getMyPage"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/member/auth/verify-email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 이메일 인증 코드 전송 */
        get: operations["requestAuthCode"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/reviews/popular": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getPopularReviews"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/reviews/place/{placeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getReviewsByPlace"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/comments/review/{reviewId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getCommentsByReview"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/comments/member/{memberId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["getCommentsByMember"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/trip/schedule/my-schedules/{scheduleId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** 나의 여행 일정 삭제 */
        delete: operations["deleteSchedule"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recruits/{recruitId}/applies/{applyId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["deleteApply"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/qna/answer/{answerId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["deleteAnswer"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/admin/blacklist/{memberId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["removeFromBlacklist"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        TripScheduleUpdateReqDto: {
            title: string;
            description: string;
            /** Format: date */
            startDate: string;
            /** Format: date */
            endDate: string;
        };
        RsDataTripScheduleResDto: {
            code?: string;
            msg?: string;
            data?: components["schemas"]["TripScheduleResDto"];
        };
        TripInformationResDto: {
            /** Format: int64 */
            placeId?: number;
            /** Format: date-time */
            visitTime?: string;
            /** Format: int32 */
            duration?: number;
            /** @enum {string} */
            transportation?: "WALK" | "BUS" | "SUBWAY" | "CAR" | "TAXI" | "ETC";
            /** Format: int32 */
            cost?: number;
            notes?: string;
            /** Format: int32 */
            priority?: number;
            visited?: boolean;
        };
        TripScheduleResDto: {
            /** Format: int64 */
            id?: number;
            memberName?: string;
            title?: string;
            description?: string;
            /** Format: date */
            startDate?: string;
            /** Format: date */
            endDate?: string;
            tripInformations?: components["schemas"]["TripInformationResDto"][];
        };
        TripInformationUpdateReqDto: {
            /** Format: int64 */
            tripInformationId: number;
            /** Format: int64 */
            placeId?: number;
            /** Format: date-time */
            visitTime?: string;
            /** Format: int32 */
            duration?: number;
            /** @enum {string} */
            transportation?: "WALK" | "BUS" | "SUBWAY" | "CAR" | "TAXI" | "ETC";
            /** Format: int32 */
            cost?: number;
            notes?: string;
            isVisited?: boolean;
        };
        TripUpdateReqDto: {
            /** Format: int64 */
            tripScheduleId: number;
            scheduleUpdate?: components["schemas"]["TripScheduleUpdateReqDto"];
            tripInformationUpdates?: components["schemas"]["TripInformationUpdateReqDto"][];
        };
        RsDataTripUpdateResDto: {
            code?: string;
            msg?: string;
            data?: components["schemas"]["TripUpdateResDto"];
        };
        TripUpdateResDto: {
            updatedSchedule?: components["schemas"]["TripScheduleResDto"];
            updatedTripInformations?: components["schemas"]["TripInformationResDto"][];
        };
        RsDataTripInformationResDto: {
            code?: string;
            msg?: string;
            data?: components["schemas"]["TripInformationResDto"];
        };
        RecruitRequestDto: {
            /** Format: int64 */
            placeId?: number;
            title?: string;
            content?: string;
            /** Format: date */
            startDate?: string;
            /** Format: date */
            endDate?: string;
            /** @enum {string} */
            travelStyle?: "SIGHTSEEING" | "RELAXATION" | "ADVENTURE" | "GOURMET" | "SHOPPING";
            sameGender?: boolean;
            sameAge?: boolean;
            /** Format: int32 */
            budget?: number;
            /** Format: int32 */
            groupSize?: number;
            closed?: boolean;
        };
        RecruitDetailResponseDto: {
            /** Format: int64 */
            recruitId?: number;
            /** Format: int64 */
            memberId?: number;
            memberProfileImage?: string;
            memberNickname?: string;
            /** Format: int64 */
            placeId?: number;
            placeCityName?: string;
            placePlaceName?: string;
            title?: string;
            content?: string;
            /** Format: date */
            startDate?: string;
            /** Format: date */
            endDate?: string;
            /** @enum {string} */
            travelStyle?: "SIGHTSEEING" | "RELAXATION" | "ADVENTURE" | "GOURMET" | "SHOPPING";
            sameGender?: boolean;
            sameAge?: boolean;
            /** Format: int32 */
            budget?: number;
            /** Format: int32 */
            groupSize?: number;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            closed?: boolean;
        };
        RsDataRecruitDetailResponseDto: {
            code?: string;
            msg?: string;
            data?: components["schemas"]["RecruitDetailResponseDto"];
        };
        PlaceUpdateReqDto: {
            cityName?: string;
            placeName?: string;
            description?: string;
            /** @enum {string} */
            category?: "PLACE" | "STAY" | "RESTAURANT" | "CAFE" | "ETC";
        };
        PlaceResDto: {
            /** Format: int64 */
            id?: number;
            cityName?: string;
            placeName?: string;
            description?: string;
            /** @enum {string} */
            category?: "PLACE" | "STAY" | "RESTAURANT" | "CAFE" | "ETC";
        };
        RsDataPlaceResDto: {
            code?: string;
            msg?: string;
            data?: components["schemas"]["PlaceResDto"];
        };
        MemberUpdateRequestDto: {
            nickname?: string;
            email?: string;
            password?: string;
            profileImage?: string;
            /** @enum {string} */
            gender?: "MALE" | "FEMALE";
            /** @enum {string} */
            ageRange?: "TEENS" | "TWENTIES" | "THIRTIES" | "FORTIES_PLUS";
            /** @enum {string} */
            travelStyle?: "TOURISM" | "RELAXATION" | "SHOPPING";
            aboutMe?: string;
        };
        MemberResponseDto: {
            /** Format: int64 */
            id?: number;
            username?: string;
            email?: string;
            nickname?: string;
            profileImage?: string;
            /** @enum {string} */
            gender?: "MALE" | "FEMALE";
            /** @enum {string} */
            ageRange?: "TEENS" | "TWENTIES" | "THIRTIES" | "FORTIES_PLUS";
            /** @enum {string} */
            travelStyle?: "TOURISM" | "RELAXATION" | "SHOPPING";
            aboutMe?: string;
            /** Format: double */
            rating?: number;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            authority?: string;
        };
        ReviewRequestDto: {
            title: string;
            content: string;
            /** Format: double */
            rating?: number;
            /** Format: int64 */
            placeId?: number;
        };
        ReviewResponseDto: {
            /** Format: int64 */
            reviewId?: number;
            title?: string;
            content?: string;
            /** Format: double */
            rating?: number;
            /** Format: int64 */
            memberId?: number;
            memberName?: string;
            /** Format: int64 */
            placeId?: number;
            /** Format: int32 */
            viewCount?: number;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: int32 */
            commentCount?: number;
        };
        RsDataReviewResponseDto: {
            code?: string;
            msg?: string;
            data?: components["schemas"]["ReviewResponseDto"];
        };
        CommentRequestDto: {
            content: string;
            /** Format: int64 */
            reviewId?: number;
        };
        CommentResponseDto: {
            /** Format: int64 */
            commentId?: number;
            content?: string;
            /** Format: int64 */
            reviewId?: number;
            /** Format: int64 */
            memberId?: number;
            memberName?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        RsDataCommentResponseDto: {
            code?: string;
            msg?: string;
            data?: components["schemas"]["CommentResponseDto"];
        };
        Member: {
            /** Format: int64 */
            id?: number;
            username?: string;
            email?: string;
            password?: string;
            nickname?: string;
            profileImage?: string;
            /** @enum {string} */
            gender?: "MALE" | "FEMALE";
            /** @enum {string} */
            ageRange?: "TEENS" | "TWENTIES" | "THIRTIES" | "FORTIES_PLUS";
            /** @enum {string} */
            travelStyle?: "TOURISM" | "RELAXATION" | "SHOPPING";
            aboutMe?: string;
            /** Format: double */
            rating?: number;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            authority?: string;
            verified?: boolean;
        };
        Notice: {
            /** Format: int64 */
            id?: number;
            title?: string;
            content?: string;
            member?: components["schemas"]["Member"];
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        TripInformationReqDto: {
            /** Format: int64 */
            placeId: number;
            /** Format: date-time */
            visitTime?: string;
            /** Format: int32 */
            duration?: number;
            /** @enum {string} */
            transportation?: "WALK" | "BUS" | "SUBWAY" | "CAR" | "TAXI" | "ETC";
            /** Format: int32 */
            cost?: number;
            notes?: string;
            /** Format: int32 */
            priority?: number;
            visited?: boolean;
        };
        TripScheduleReqDto: {
            /** Format: int64 */
            memberId?: number;
            title?: string;
            description?: string;
            /** Format: date */
            startDate?: string;
            /** Format: date */
            endDate?: string;
            tripInformations?: components["schemas"]["TripInformationReqDto"][];
        };
        ApplyCreateRequestDto: {
            content?: string;
        };
        ApplyResponseDto: {
            /** Format: int64 */
            applyId?: number;
            /** Format: int64 */
            memberId?: number;
            memberProfileImage?: string;
            memberNickname?: string;
            content?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        RsDataApplyResponseDto: {
            code?: string;
            msg?: string;
            data?: components["schemas"]["ApplyResponseDto"];
        };
        QuestionDto: {
            title?: string;
            content?: string;
            /** Format: int64 */
            memberId?: number;
            createdAt?: string;
            updatedAt?: string;
            memberUsername?: string;
        };
        Answer: {
            /** Format: int64 */
            id?: number;
            member?: components["schemas"]["Member"];
            question?: components["schemas"]["Question"];
            content?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        Question: {
            /** Format: int64 */
            id?: number;
            member?: components["schemas"]["Member"];
            title?: string;
            content?: string;
            answers?: components["schemas"]["Answer"][];
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        PlaceCreateReqDto: {
            cityName: string;
            placeName: string;
            description?: string;
            /** @enum {string} */
            category: "PLACE" | "STAY" | "RESTAURANT" | "CAFE" | "ETC";
        };
        LoginRequestDto: {
            username: string;
            password: string;
        };
        JoinRequestDto: {
            username: string;
            email: string;
            password: string;
            nickname: string;
            profileImage?: string;
            /** @enum {string} */
            gender: "MALE" | "FEMALE";
            /** @enum {string} */
            ageRange: "TEENS" | "TWENTIES" | "THIRTIES" | "FORTIES_PLUS";
            /** @enum {string} */
            travelStyle: "TOURISM" | "RELAXATION" | "SHOPPING";
            aboutMe?: string;
        };
        EmailVerificationRequestDto: {
            email: string;
            authCode: string;
        };
        Dto: {
            /** Format: int64 */
            memberId?: number;
            reason?: string;
        };
        RsDataListTripScheduleResDto: {
            code?: string;
            msg?: string;
            data?: components["schemas"]["TripScheduleResDto"][];
        };
        RecruitListResponseDto: {
            /** Format: int64 */
            recruitId?: number;
            memberProfileImage?: string;
            memberNickname?: string;
            placeCityName?: string;
            placePlaceName?: string;
            title?: string;
            /** Format: date */
            startDate?: string;
            /** Format: date */
            endDate?: string;
            /** @enum {string} */
            travelStyle?: "SIGHTSEEING" | "RELAXATION" | "ADVENTURE" | "GOURMET" | "SHOPPING";
            sameGender?: boolean;
            sameAge?: boolean;
            /** Format: int32 */
            budget?: number;
            /** Format: int32 */
            groupSize?: number;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            closed?: boolean;
        };
        RsDataListRecruitListResponseDto: {
            code?: string;
            msg?: string;
            data?: components["schemas"]["RecruitListResponseDto"][];
        };
        RsDataListApplyResponseDto: {
            code?: string;
            msg?: string;
            data?: components["schemas"]["ApplyResponseDto"][];
        };
        RsDataListPlaceResDto: {
            code?: string;
            msg?: string;
            data?: components["schemas"]["PlaceResDto"][];
        };
        RsDataListReviewResponseDto: {
            code?: string;
            msg?: string;
            data?: components["schemas"]["ReviewResponseDto"][];
        };
        RsDataListCommentResponseDto: {
            code?: string;
            msg?: string;
            data?: components["schemas"]["CommentResponseDto"][];
        };
        Blacklist: {
            /** Format: date-time */
            createdAt?: string;
            /** Format: int64 */
            id?: number;
            member?: components["schemas"]["Member"];
            reason?: string;
        };
        RsDataVoid: {
            code?: string;
            msg?: string;
            data?: Record<string, never>;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    updateSchedule: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                scheduleId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TripScheduleUpdateReqDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RsDataTripScheduleResDto"];
                };
            };
        };
    };
    updateTrip: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TripUpdateReqDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RsDataTripUpdateResDto"];
                };
            };
        };
    };
    updateTripInformation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tripInfoId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TripInformationUpdateReqDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RsDataTripInformationResDto"];
                };
            };
        };
    };
    getRecruit: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                recruitId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RsDataRecruitDetailResponseDto"];
                };
            };
        };
    };
    updateRecruit: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
            };
            path: {
                recruitId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RecruitRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RsDataRecruitDetailResponseDto"];
                };
            };
        };
    };
    deleteRecruit: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
            };
            path: {
                recruitId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    getPlace: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description 여행지 ID
                 * @example 1
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RsDataPlaceResDto"];
                };
            };
        };
    };
    updatePlace: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description 여행지 ID
                 * @example 1
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PlaceUpdateReqDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RsDataPlaceResDto"];
                };
            };
        };
    };
    deletePlace: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description 여행지 ID
                 * @example 1
                 */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    updateMember: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MemberUpdateRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["MemberResponseDto"];
                };
            };
        };
    };
    deleteMember: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getReview: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                reviewId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RsDataReviewResponseDto"];
                };
            };
        };
    };
    updateReview: {
        parameters: {
            query?: {
                memberId?: number;
            };
            header?: never;
            path: {
                reviewId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReviewRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RsDataReviewResponseDto"];
                };
            };
        };
    };
    deleteReview: {
        parameters: {
            query?: {
                memberId?: number;
            };
            header?: never;
            path: {
                reviewId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    getComment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                commentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RsDataCommentResponseDto"];
                };
            };
        };
    };
    updateComment: {
        parameters: {
            query?: {
                memberId?: number;
            };
            header?: never;
            path: {
                commentId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CommentRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RsDataCommentResponseDto"];
                };
            };
        };
    };
    deleteComment: {
        parameters: {
            query?: {
                memberId?: number;
            };
            header?: never;
            path: {
                commentId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    getNoticeById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Notice"];
                };
            };
        };
    };
    updateNotice: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Notice"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Notice"];
                };
            };
        };
    };
    deleteNotice: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAllSchedules: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RsDataListTripScheduleResDto"];
                };
            };
        };
    };
    createSchedule: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TripScheduleReqDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RsDataTripScheduleResDto"];
                };
            };
        };
    };
    getRecruits: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RsDataListRecruitListResponseDto"];
                };
            };
        };
    };
    createRecruit: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RecruitRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RsDataRecruitDetailResponseDto"];
                };
            };
        };
    };
    getApplies: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                recruitId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RsDataListApplyResponseDto"];
                };
            };
        };
    };
    createApply: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
            };
            path: {
                recruitId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ApplyCreateRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RsDataApplyResponseDto"];
                };
            };
        };
    };
    getAllQuestions: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["QuestionDto"][];
                };
            };
        };
    };
    createQuestion: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["QuestionDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Question"];
                };
            };
        };
    };
    createAnswer: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    [key: string]: Record<string, never>;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getAllPlaces: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RsDataListPlaceResDto"];
                };
            };
        };
    };
    createPlace: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PlaceCreateReqDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RsDataPlaceResDto"];
                };
            };
        };
    };
    refresh: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie: {
                refreshToken: string;
            };
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": Record<string, never>;
                };
            };
        };
    };
    join: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["JoinRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["MemberResponseDto"];
                };
            };
        };
    };
    validateAuthCode: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmailVerificationRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    getReviews: {
        parameters: {
            query?: {
                sort?: string;
                keyword?: string;
                placeId?: number;
                memberId?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RsDataListReviewResponseDto"];
                };
            };
        };
    };
    createReview: {
        parameters: {
            query?: {
                memberId?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReviewRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RsDataReviewResponseDto"];
                };
            };
        };
    };
    createComment: {
        parameters: {
            query?: {
                memberId?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CommentRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RsDataCommentResponseDto"];
                };
            };
        };
    };
    getAllNotices: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Notice"][];
                };
            };
        };
    };
    createNotice: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Notice"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Notice"];
                };
            };
        };
    };
    getBlacklist: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Blacklist"][];
                };
            };
        };
    };
    addToBlacklist: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Dto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    getMySchedules: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RsDataListTripScheduleResDto"];
                };
            };
        };
    };
    getSchedulesByMember: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                memberId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RsDataListTripScheduleResDto"];
                };
            };
        };
    };
    searchRecruits: {
        parameters: {
            query: {
                keyword: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RsDataListRecruitListResponseDto"];
                };
            };
        };
    };
    searchAndFilter: {
        parameters: {
            query?: {
                keyword?: string;
                cityName?: string;
                isClosed?: boolean;
                startDate?: string;
                endDate?: string;
                travelStyle?: string;
                sameGender?: boolean;
                sameAge?: boolean;
                minBudget?: number;
                maxBudget?: number;
                minGroupSize?: number;
                maxGroupSize?: number;
                sortBy?: string;
            };
            header?: {
                Authorization?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RsDataListRecruitListResponseDto"];
                };
            };
        };
    };
    findRecruitsByIsClosed: {
        parameters: {
            query: {
                isClosed: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RsDataListRecruitListResponseDto"];
                };
            };
        };
    };
    getQuestionById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["Question"];
                };
            };
        };
    };
    deleteQuestionById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getMyPage: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["MemberResponseDto"];
                };
            };
        };
    };
    requestAuthCode: {
        parameters: {
            query: {
                email: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
    getPopularReviews: {
        parameters: {
            query?: {
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RsDataListReviewResponseDto"];
                };
            };
        };
    };
    getReviewsByPlace: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                placeId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RsDataListReviewResponseDto"];
                };
            };
        };
    };
    getCommentsByReview: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                reviewId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RsDataListCommentResponseDto"];
                };
            };
        };
    };
    getCommentsByMember: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                memberId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RsDataListCommentResponseDto"];
                };
            };
        };
    };
    deleteSchedule: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
            };
            path: {
                scheduleId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    deleteApply: {
        parameters: {
            query?: never;
            header?: {
                Authorization?: string;
            };
            path: {
                applyId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    deleteAnswer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                answerId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    removeFromBlacklist: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                memberId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
        };
    };
}
